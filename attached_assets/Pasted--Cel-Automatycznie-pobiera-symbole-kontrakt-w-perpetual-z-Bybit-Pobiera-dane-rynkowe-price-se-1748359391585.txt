🎯 Cel:

Automatycznie pobiera symbole kontraktów perpetual z Bybit

Pobiera dane rynkowe: price, sentiment, mempool, whale activity, orderbook

📦 WYMAGANE ZMIENNE .env:
ini
Kopiuj
Edytuj
CRYPTOCOMPARE_API_KEY=...
ETHERSCAN_API_KEY=...
BSCSCAN_API_KEY=...
POLYGONSCAN_API_KEY=...
ARBISCAN_API_KEY=...
OPTIMISMSCAN_API_KEY=...
TRONGRID_API_KEY=...
✅ Kod utils/data_fetchers.py:
python
Kopiuj
Edytuj
import requests
import time
import random
import os
from dotenv import load_dotenv

load_dotenv()

# === SYMBOL LIST ===
def get_symbols_cached() -> list:
    try:
        url = "https://api.bybit.com/v5/market/instruments-info?category=linear"
        response = requests.get(url, timeout=10)
        symbols = [
            entry["symbol"]
            for entry in response.json().get("result", {}).get("list", [])
            if entry["symbol"].endswith("USDT")
        ]
        return symbols[:50]  # ograniczamy do top 50
    except Exception as e:
        print(f"❌ Błąd pobierania symboli: {e}")
        return ["DOGEUSDT", "FLOKIUSDT", "PEPEUSDT"]

# === DANE RYNKOWE ===
def get_market_data(symbol: str) -> dict:
    try:
        # --- Placeholdery na realne dane, można podmienić później ---
        return {
            "price": get_price_data(symbol),
            "sentiment": get_sentiment(symbol),
            "mempool": get_mempool_data(symbol),
            "whale": get_whale_data(symbol),
            "orderbook": get_orderbook_data(symbol)
        }
    except Exception as e:
        print(f"❌ Błąd get_market_data({symbol}): {e}")
        return {}

# === MOCKOWANE DANE ===

def get_price_data(symbol: str) -> dict:
    return {
        "current": round(random.uniform(0.00001, 0.2), 6),
        "change_15m": random.uniform(-3, 3)
    }

def get_sentiment(symbol: str) -> dict:
    return {
        "score": random.randint(-100, 100),
        "tweets": random.randint(20, 500)
    }

def get_mempool_data(symbol: str) -> dict:
    return {
        "tx_count": random.randint(0, 15),
        "avg_gas": random.uniform(10, 80)
    }

def get_whale_data(symbol: str) -> dict:
    return {
        "buy_count": random.randint(0, 5),
        "sell_count": random.randint(0, 5)
    }

def get_orderbook_data(symbol: str) -> dict:
    return {
        "bid_ask_ratio": round(random.uniform(0.8, 1.2), 2),
        "spoofing": random.choice([True, False])
    }
📌 UWAGI:
Funkcja get_symbols_cached() pobiera realne dane z Bybit

get_market_data() zawiera strukturę docelową

Funkcje get_price_data, get_sentiment, itd. mają placeholdery – podmienimy na prawdziwe źródła później (Dexscreener, CryptoCompare itd.)