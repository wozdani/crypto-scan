integrujemy feedback GPT z całą pętlą scan_cycle() tak, aby automatycznie:

Liczył PPWCS

Generował TP Forecast

Wysyłał alert (jeśli spełnia warunki)

Jeśli PPWCS ≥ 80 → wysyłał raport do GPT i zapisywał feedback

✅ 1. Wymagane importy na górze pliku
Upewnij się, że masz:

python
Kopiuj
Edytuj
import openai
import os
from datetime import datetime
✅ 2. Funkcja send_report_to_gpt()
Wklej do głównego pliku (jeśli jeszcze nie):

python
Kopiuj
Edytuj
def send_report_to_gpt(symbol, data, tp_forecast):
    openai.api_key = os.getenv("OPENAI_API_KEY")

    prompt = f"""You are an expert crypto analyst. Evaluate the following pre-pump signal:
    
Token: ${symbol.upper()}
PPWCS: {data.get("ppwcs_score", 0)}
Stage –2.1: Whale: {data.get("whale_activity", False)}, Inflow: {data.get("dex_inflow_usd", 0)}
Stage –1: Compressed: {data.get("compressed", False)}
Stage 1g: Active: {data.get("stage1g_active", False)}
Pure Accumulation: {data.get("pure_accumulation", False)}

TP Forecast:
TP1: +{int(tp_forecast['TP1']*100)}%
TP2: +{int(tp_forecast['TP2']*100)}%
TP3: +{int(tp_forecast['TP3']*100)}%
Trailing: {tp_forecast['trailing_tp']}

Please give your feedback on this signal. Is it strong? What are potential risks? Reply in 3 short sentences."""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a crypto signal quality evaluator."},
                {"role": "user", "content": prompt}
            ],
            timeout=15
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        return f"[GPT ERROR] {str(e)}"
✅ 3. Zmiana w scan_cycle()
Przykład fragmentu gotowej pętli (główna logika):

python
Kopiuj
Edytuj
for symbol in symbols:
    data = get_token_data(symbol)
    ppwcs_score = compute_ppwcs(data)

    if ppwcs_score < 60:
        continue  # pomiń słabe sygnały

    alert_level = get_alert_level(ppwcs_score, symbol)
    if not alert_level:
        continue  # nie generujemy alertu (np. cooldown)

    tp_forecast = forecast_take_profits(symbol, data)
    send_alert(symbol, ppwcs_score, alert_level, tp_forecast=tp_forecast)

    if ppwcs_score >= 80:
        gpt_feedback = send_report_to_gpt(symbol, data, tp_forecast)
        print(f"[GPT FEEDBACK] {symbol}: {gpt_feedback}")
        os.makedirs("feedback", exist_ok=True)
        with open(f"feedback/{symbol}_{datetime.utcnow().strftime('%Y%m%d_%H%M')}.txt", "w") as f:
            f.write(gpt_feedback)
✅ 4. Gotowe foldery (jeśli nie masz)
Dodaj w Replit foldery:

feedback/ – na zapis tekstów GPT

