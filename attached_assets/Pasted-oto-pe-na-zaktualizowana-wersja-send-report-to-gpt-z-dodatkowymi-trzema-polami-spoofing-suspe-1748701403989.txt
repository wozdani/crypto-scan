oto peÅ‚na, zaktualizowana wersja send_report_to_gpt() z dodatkowymi trzema polami:

âœ… spoofing_suspected

âœ… vwap_pinned

âœ… volume_slope_up

UwzglÄ™dnia rÃ³wnieÅ¼ caÅ‚Ä… poprzedniÄ… logikÄ™ promptu.

ðŸ§  Zaktualizowana funkcja send_report_to_gpt()
python
Kopiuj
Edytuj
def send_report_to_gpt(symbol, data, tp_forecast, alert_level):
    openai.api_key = os.getenv("OPENAI_API_KEY")

    ppwcs = data.get("ppwcs_score", 0)
    whale = data.get("whale_activity", False)
    inflow = data.get("dex_inflow_usd", 0)
    compressed = data.get("compressed", False)
    stage1g = data.get("stage1g_active", False)
    pure_acc = data.get("pure_accumulation", False)
    social_spike = data.get("social_spike", False)
    heatmap_exhaustion = data.get("heatmap_exhaustion", False)
    sector_cluster = data.get("sector_clustered", False)
    spoofing = data.get("spoofing_suspected", False)
    vwap_pinned = data.get("vwap_pinned", False)
    vol_slope = data.get("volume_slope_up", False)

    timestamp = datetime.utcnow().strftime("%H:%M UTC")

    prompt = f"""You are an expert crypto analyst. Evaluate the following pre-pump signal:

Token: ${symbol.upper()}
PPWCS: {ppwcs}
Alert Level: {alert_level}
Detected at: {timestamp}

Stage â€“2.1:
â€¢ Whale Activity: {whale}
â€¢ DEX Inflow (USD): {inflow}
â€¢ Social Spike Detected: {social_spike}
â€¢ Sector Time Clustering Active: {sector_cluster}

Stage â€“1:
â€¢ Compressed Structure: {compressed}

Stage 1g:
â€¢ Active: {stage1g}
â€¢ Pure Accumulation (No Social): {pure_acc}

Structural Detectors:
â€¢ Heatmap Exhaustion: {heatmap_exhaustion}
â€¢ Spoofing Suspected: {spoofing}
â€¢ VWAP Pinned: {vwap_pinned}
â€¢ Volume Slope Up: {vol_slope}

TP Forecast:
â€¢ TP1: +{int(tp_forecast['TP1'] * 100)}%
â€¢ TP2: +{int(tp_forecast['TP2'] * 100)}%
â€¢ TP3: +{int(tp_forecast['TP3'] * 100)}%
â€¢ Trailing: {tp_forecast['trailing_tp']}

Evaluate the quality and strength of this signal. Provide a confident but concise assessment in 3 short sentences, including any risk factors and probability of continuation.
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a crypto signal quality evaluator."},
                {"role": "user", "content": prompt}
            ],
            timeout=15
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        return f"[GPT ERROR] {str(e)}"