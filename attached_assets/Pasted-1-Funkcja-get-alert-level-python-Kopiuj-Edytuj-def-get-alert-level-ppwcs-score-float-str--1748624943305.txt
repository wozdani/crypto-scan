1. Funkcja get_alert_level()
python
Kopiuj
Edytuj
def get_alert_level(ppwcs_score: float) -> str:
    if ppwcs_score >= 80:
        return "strong"     # 🚨
    elif 70 <= ppwcs_score < 80:
        return "active"     # ⚠️
    elif 60 <= ppwcs_score < 70:
        return "watchlist"  # 👀
    else:
        return "none"
📌 2. Cooldown system (alert_cooldown.json)
Dodaj do utils/alert_cooldown.py:

python
Kopiuj
Edytuj
import json
from datetime import datetime, timedelta

COOLDOWN_FILE = 'alert_cooldown.json'

def load_cooldowns():
    try:
        with open(COOLDOWN_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_cooldowns(cooldowns):
    with open(COOLDOWN_FILE, 'w') as f:
        json.dump(cooldowns, f)

def is_on_cooldown(token):
    cooldowns = load_cooldowns()
    last_alert = cooldowns.get(token)
    if last_alert:
        last_time = datetime.fromisoformat(last_alert)
        if datetime.utcnow() - last_time < timedelta(minutes=60):
            return True
    return False

def update_cooldown(token):
    cooldowns = load_cooldowns()
    cooldowns[token] = datetime.utcnow().isoformat()
    save_cooldowns(cooldowns)
📌 3. W send_alert():
Wklej do utils/telegram_alert.py:

python
Kopiuj
Edytuj
from utils.alert_cooldown import is_on_cooldown, update_cooldown
from utils.ppwcs_logic import get_alert_level  # jeśli w oddzielnym pliku

def send_alert(token, ppwcs_score, tp_levels, stage1g_trigger_type):
    alert_level = get_alert_level(ppwcs_score)

    if alert_level in ["active", "strong"]:
        if is_on_cooldown(token):
            print(f"⏳ {token} – cooldown 60 min aktywny, alert pominięty.")
            return

        message = f"🚀 [{token}] ALERT LEVEL: {alert_level.upper()}\n"
        message += f"📊 PPWCS: {ppwcs_score}\n"
        if tp_levels:
            message += f"🎯 TP1: {tp_levels.get('tp1')}%  | TP2: {tp_levels.get('tp2')}%  | TP3: {tp_levels.get('tp3')}%\n"
        if stage1g_trigger_type:
            message += f"🧠 Trigger: {stage1g_trigger_type}"

        send_telegram_message(message)
        update_cooldown(token)

        if alert_level == "strong":
            send_report_to_chatgpt(token)  # opcjonalnie z pełnym raportem
📌 4. W scan_cycle():
Dla każdego tokena dodaj:

python
Kopiuj
Edytuj
alert_level = get_alert_level(ppwcs_score)

if alert_level in ["active", "strong"]:
    send_alert(
        token=symbol,
        ppwcs_score=ppwcs_score,
        tp_levels=tp_forecast,
        stage1g_trigger_type=trigger_type  # np. "tag_boost" lub None
    )