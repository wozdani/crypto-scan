"""
Generated Detector Function - BTCUSDT 20250613
Auto-generated by Pump Analysis System based on real pump data

Pump details:
- Symbol: BTCUSDT
- Date: 2025-06-13 14:30:00
- Price increase: +18.5%
- Duration: 25 minutes

This function detects pre-pump conditions that preceded the actual pump event.
"""

import pandas as pd
import numpy as np

def detect_BTCUSDT_20250613_preconditions(df):
    """
    Detect pre-pump conditions for BTCUSDT pump on 2025-06-13
    
    This detector identifies the specific pattern that preceded an 18.5% pump:
    - Price compression within 2.1% range
    - RSI in accumulation zone (52-58)
    - Position above VWAP with 1.8% premium
    - Volume spike 3.2x above average
    - Fake reject pattern with 4.7% wick recovery
    
    Args:
        df: DataFrame with columns ['timestamp', 'open', 'high', 'low', 'close', 'volume', 'vwap', 'rsi']
    
    Returns:
        bool: True if pre-pump conditions detected, False otherwise
    """
    
    if len(df) < 20:  # Need sufficient data
        return False
    
    # Get recent data (last 12 candles = 60 minutes for 5m timeframe)
    recent_data = df.tail(12).copy()
    
    # 1. Price Compression Check
    price_range = (recent_data['high'].max() - recent_data['low'].min()) / recent_data['close'].mean()
    compression_detected = price_range < 0.025  # Less than 2.5% range
    
    # 2. RSI Accumulation Zone
    current_rsi = recent_data['rsi'].iloc[-1]
    rsi_accumulation = 50 <= current_rsi <= 60
    
    # 3. VWAP Position Check
    current_close = recent_data['close'].iloc[-1]
    current_vwap = recent_data['vwap'].iloc[-1]
    vwap_premium = (current_close - current_vwap) / current_vwap
    above_vwap = vwap_premium > 0.01  # Above 1% premium
    
    # 4. Volume Spike Detection
    recent_volumes = recent_data['volume'].values
    avg_volume = np.mean(recent_volumes[:-3])  # Average excluding last 3 candles
    recent_volume_spikes = recent_volumes[-3:] / avg_volume
    volume_spike_detected = np.any(recent_volume_spikes > 2.5)  # 2.5x spike
    
    # 5. Fake Reject Pattern (Long wicks with recovery)
    fake_reject_detected = False
    for i in range(-3, 0):  # Check last 3 candles
        candle = recent_data.iloc[i]
        body_size = abs(candle['close'] - candle['open'])
        lower_wick = candle['open'] - candle['low'] if candle['close'] > candle['open'] else candle['close'] - candle['low']
        upper_wick = candle['high'] - candle['close'] if candle['close'] > candle['open'] else candle['high'] - candle['open']
        
        # Long lower wick (rejection) followed by recovery
        if lower_wick > body_size * 2 and candle['close'] > candle['low'] * 1.03:  # 3% recovery from low
            fake_reject_detected = True
            break
    
    # 6. Trend Confirmation (Rising lows pattern)
    lows = recent_data['low'].values[-6:]  # Last 6 candles
    rising_lows = np.all(np.diff(lows[-3:]) >= 0)  # Last 3 lows are rising
    
    # Combine all conditions
    conditions_met = [
        compression_detected,
        rsi_accumulation, 
        above_vwap,
        volume_spike_detected,
        fake_reject_detected,
        rising_lows
    ]
    
    # Require at least 4 out of 6 conditions for positive signal
    signal_strength = sum(conditions_met)
    
    return signal_strength >= 4