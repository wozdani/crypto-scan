Zaktualizowana funkcja send_report_to_gpt() (Replit-ready):
python
Kopiuj
Edytuj
def send_report_to_gpt(symbol, data, tp_forecast, alert_level):
    openai.api_key = os.getenv("OPENAI_API_KEY")

    ppwcs = data.get("ppwcs_score", 0)
    whale = data.get("whale_activity", False)
    inflow = data.get("dex_inflow_usd", 0)
    compressed = data.get("compressed", False)
    stage1g = data.get("stage1g_active", False)
    pure_acc = data.get("pure_accumulation", False)
    social_spike = data.get("social_spike", False)
    heatmap_exhaustion = data.get("heatmap_exhaustion", False)
    sector_cluster = data.get("sector_clustered", False)

    timestamp = datetime.utcnow().strftime("%H:%M UTC")

    prompt = f"""You are an expert crypto analyst. Evaluate the following pre-pump signal:

Token: ${symbol.upper()}
PPWCS: {ppwcs}
Alert Level: {alert_level}
Detected at: {timestamp}

Stage –2.1:
• Whale Activity: {whale}
• DEX Inflow (USD): {inflow}
• Social Spike Detected: {social_spike}
• Sector Time Clustering Active: {sector_cluster}

Stage –1:
• Compressed Structure: {compressed}

Stage 1g:
• Active: {stage1g}
• Pure Accumulation (No Social): {pure_acc}

Heatmap Exhaustion: {heatmap_exhaustion}

TP Forecast:
• TP1: +{int(tp_forecast['TP1'] * 100)}%
• TP2: +{int(tp_forecast['TP2'] * 100)}%
• TP3: +{int(tp_forecast['TP3'] * 100)}%
• Trailing: {tp_forecast['trailing_tp']}

Evaluate the quality and strength of this signal. Provide a confident but concise assessment in **3 short sentences**, including **any risk factors** and **probability of continuation.**
"""

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a crypto signal quality evaluator."},
                {"role": "user", "content": prompt}
            ],
            timeout=15
        )
        return response['choices'][0]['message']['content'].strip()
    except Exception as e:
        return f"[GPT ERROR] {str(e)}"
✅ W scan_cycle() wywołuj tak:
python
Kopiuj
Edytuj
if ppwcs_score >= 80:
    gpt_feedback = send_report_to_gpt(symbol, data, tp_forecast, alert_level)