Skupiamy siƒô teraz na budowie realnego modu≈Çu, kt√≥ry:

üì¶ Zbiera:
≈öwieczki 15m z Bybit

Bie≈ºƒÖce dane (price, volume, RSI itp.)

Na podstawie listy ["PEPEUSDT", "FLOKIUSDT", "WIFUSDT", "SHIBUSDT", "DOGEUSDT"]

üîß Plik: utils/data_fetchers.py
Oto kod do wklejenia w ca≈Ço≈õci:

python
Kopiuj
Edytuj
import requests
import time

BYBIT_BASE_URL = "https://api.bybit.com"

def get_test_symbols():
    # Tymczasowa lista token√≥w ‚Äî u≈ºywana do czasu przenosin do chmury
    return ["PEPEUSDT", "FLOKIUSDT", "WIFUSDT", "SHIBUSDT", "DOGEUSDT"]

def fetch_klines(symbol, interval="15", limit=2):
    url = f"{BYBIT_BASE_URL}/v5/market/kline"
    params = {
        "category": "linear",
        "symbol": symbol,
        "interval": interval,
        "limit": limit,
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if data["retCode"] == 0:
            return data["result"]["list"]
        else:
            print(f"‚ùå B≈ÇƒÖd danych Bybit dla {symbol}: {data}")
            return None
    except Exception as e:
        print(f"‚ùå WyjƒÖtek dla {symbol}: {e}")
        return None

def get_last_candles(symbol):
    candles = fetch_klines(symbol, interval="15", limit=2)
    if not candles:
        return None, None
    return candles[-2], candles[-1]  # poprzednia i obecna ≈õwieca

def get_all_data(symbol):
    prev_candle, last_candle = get_last_candles(symbol)
    if not last_candle:
        return None

    try:
        # Kandle: [timestamp, open, high, low, close, volume, turnover]
        open_price = float(last_candle[1])
        close_price = float(last_candle[4])
        high = float(last_candle[2])
        low = float(last_candle[3])
        volume = float(last_candle[5])
        price_change = close_price - open_price
        candle_body = abs(close_price - open_price)
        candle_range = high - low
        if candle_range == 0:  # zabezpieczenie przed zerem
            candle_range = 0.0001
        body_ratio = candle_body / candle_range

        return {
            "open": open_price,
            "close": close_price,
            "high": high,
            "low": low,
            "volume": volume,
            "price_change": price_change,
            "body_ratio": round(body_ratio, 4),
            "prev_candle": prev_candle,
            "last_candle": last_candle,
        }
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd przy parsowaniu ≈õwiecy {symbol}: {e}")
        return None
üìÅ Gdzie wkleiƒá?
Plik: utils/data_fetchers.py