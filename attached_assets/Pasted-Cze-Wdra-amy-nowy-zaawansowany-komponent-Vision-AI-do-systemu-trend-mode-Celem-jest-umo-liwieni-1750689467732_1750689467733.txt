CzeÅ›Ä‡! WdraÅ¼amy nowy, zaawansowany komponent Vision-AI do systemu trend-mode. Celem jest umoÅ¼liwienie modelowi komputerowego widzenia wykresÃ³w, trenowanego na realnych danych (obraz + kontekst + etykieta od GPT), ktÃ³ry automatycznie oceni fazÄ™ rynku i typ setupu.

âœ… Zakres prac â€“ wdraÅ¼amy punkty 1, 2, 3, 5:
ğŸ“Œ 1. Eksport wykresÃ³w
Dodaj moduÅ‚ chart_exporter.py, ktÃ³ry eksportuje wykresy tokenÃ³w w czasie skanu jako obrazy (np. charts/JSTUSDT_20250623_1400.png) przy uÅ¼yciu matplotlib lub snapshot API z Bybit/TV.

python
Kopiuj
Edytuj
# utils/chart_exporter.py
import matplotlib.pyplot as plt
import os

def save_candlestick_chart(symbol, candles, output_dir="charts"):
    import mplfinance as mpf
    import pandas as pd

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    df = pd.DataFrame(candles)
    df.columns = ["timestamp", "open", "high", "low", "close", "volume"]
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df.set_index("timestamp", inplace=True)

    fname = f"{symbol}_chart.png"
    mpf.plot(df, type='candle', volume=True, style='charles', savefig=f"{output_dir}/{fname}")
    return f"{output_dir}/{fname}"
ğŸ“Œ 2. Automatyczna etykieta od GPT
Dodaj do label_generator.py funkcjÄ™, ktÃ³ra bierze obraz wykresu i kontekst scoringu, i wysyÅ‚a zapytanie do GPT (lub lokalnie generuje etykietÄ™ â€“ np. setup_type, phase_type) i zapisuje jako labels.jsonl.

python
Kopiuj
Edytuj
# ai/label_generator.py
def generate_label_gpt(image_path, context_features) -> dict:
    """
    WysyÅ‚a do GPT opis wykresu + scoring i zwraca etykiety:
    - setup_type: breakout_with_pullback, exhaustion, fakeout, range_accumulation...
    - phase_type: breakout-continuation, exhaustion-pullback...
    - confidence: 0.0 - 1.0
    """
    prompt = f"""
    Na podstawie wykresu ({image_path}) i scoringu {context_features}, podaj tylko:
    - phase_type: ...
    - setup_type: ...
    - confidence: ...

    Bez wyjaÅ›nieÅ„.
    """
    response = call_gpt_model(prompt)
    return parse_labels(response)
ğŸ“Œ 3. Zapis danych treningowych
Po kaÅ¼dej analizie tokenu zapisuj do folderu training_data/:

obraz wykresu (np. JSTUSDT_chart.png)

kontekst scoringu (JSTUSDT_meta.json)

etykieta (JSTUSDT_label.json)

bash
Kopiuj
Edytuj
training_data/
â”œâ”€â”€ JSTUSDT_chart.png
â”œâ”€â”€ JSTUSDT_meta.json
â”œâ”€â”€ JSTUSDT_label.json
ğŸ“Œ 5. Przygotowanie datasetu treningowego
Dodaj skrypt prepare_training_dataset.py, ktÃ³ry zbiera wszystkie dane z training_data/, Å‚Ä…czy je w dataset (np. CSV + obrazy) do trenowania modelu CV (CLIP, ViT, CNN).

bash
Kopiuj
Edytuj
python prepare_training_dataset.py --output vision_dataset/
ğŸ“¦ Foldery do utworzenia:

charts/

training_data/

ai/

ğŸ“£ Cel koÅ„cowy:
Zbudujemy model AI, ktÃ³ry bÄ™dzie widziaÅ‚ wykresy jak trader, i klasyfikowaÅ‚ setup + phase. W przyszÅ‚oÅ›ci model zostanie wpiÄ™ty do TJDE i bÄ™dzie wspomagaÅ‚ scoring.

Dajcie znaÄ‡ jak coÅ› niejasne â€“ to waÅ¼na czÄ™Å›Ä‡ caÅ‚ego systemu "inteligentnego tradera" ğŸš€
Gotowy do kolejnych krokÃ³w: trenowanie modelu, integracja predykcji i feedback loop oparty na wynikach modelu.

