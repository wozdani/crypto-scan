Dla ka≈ºdego tokena sprawdzamy ostatnie transakcje TO kontrakt i:

Je≈õli kwota > 50 000 USD ‚Üí whale_tx = True

üîß KOD DO stage_minus2_1.py
1. üß† Import na g√≥rze:
python
Kopiuj
Edytuj
from utils.token_price import get_token_price_usd
2. üì¶ Funkcja detect_whale_tx(symbol)
Dodaj do stage_minus2_1.py:

python
Kopiuj
Edytuj
def detect_whale_tx(symbol):
    try:
        with open("token_contract_map.json", "r") as f:
            token_map = json.load(f)

        token_info = token_map.get(symbol)
        if not token_info:
            print(f"‚ö†Ô∏è Brak kontraktu dla {symbol}")
            return False

        address = token_info["address"]
        chain = token_info["chain"]

        # Dob√≥r API key
        if chain == "ethereum":
            base_url = "https://api.etherscan.io/api"
            api_key = os.getenv("ETHERSCAN_API_KEY")
        elif chain == "bsc":
            base_url = "https://api.bscscan.com/api"
            api_key = os.getenv("BSCSCAN_API_KEY")
        elif chain == "arbitrum":
            base_url = "https://api.arbiscan.io/api"
            api_key = os.getenv("ARBISCAN_API_KEY")
        else:
            print(f"‚ö†Ô∏è Chain {chain} nieobs≈Çugiwany")
            return False

        params = {
            "module": "account",
            "action": "txlist",
            "address": address,
            "startblock": 0,
            "endblock": 99999999,
            "sort": "desc",
            "apikey": api_key,
        }

        response = requests.get(base_url, params=params, timeout=10)
        data = response.json()

        if data["status"] != "1":
            return False

        price_usd = get_token_price_usd(symbol)
        if price_usd is None:
            return False

        for tx in data["result"][:10]:
            if tx["to"].lower() == address.lower():
                token_amount = int(tx["value"]) / (10 ** 18)
                usd_value = token_amount * price_usd
                if usd_value > 50000:
                    return True

        return False
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd whale TX {symbol}: {e}")
        return False
3. üß† W detect_stage_minus2_1() dodaj:
python
Kopiuj
Edytuj
if detect_whale_tx(symbol):
    signals["whale_tx"] = True
üß† Plik pomocniczy utils/token_price.py:
Stw√≥rz plik utils/token_price.py:

python
Kopiuj
Edytuj
import requests

def get_token_price_usd(symbol):
    try:
        coingecko_id_map = {
            "PEPEUSDT": "pepe",
            "FLOKIUSDT": "floki",
            # Dodaj wiƒôcej symboli ‚Üí id z coingecko
        }

        token_id = coingecko_id_map.get(symbol)
        if not token_id:
            print(f"‚ö†Ô∏è Brak CoinGecko ID dla {symbol}")
            return None

        url = f"https://api.coingecko.com/api/v3/simple/price?ids={token_id}&vs_currencies=usd"
        res = requests.get(url, timeout=10)
        data = res.json()
        return data[token_id]["usd"]
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd CoinGecko dla {symbol}: {e}")
        return None
‚úÖ Test (w test_stage2.py)
python
Kopiuj
Edytuj
symbols = ["PEPEUSDT", "FLOKIUSDT"]

for sym in symbols:
    stage2_pass, signals, inflow = detect_stage_minus2_1(sym)
    print(f"{sym} ‚Üí PASS: {stage2_pass} | SIGNALS: {signals} | INFLOW: {inflow:.2f}")