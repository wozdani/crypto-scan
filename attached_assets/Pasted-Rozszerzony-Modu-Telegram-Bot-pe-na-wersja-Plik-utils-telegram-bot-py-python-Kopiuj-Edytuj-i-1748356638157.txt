Rozszerzony Moduł: Telegram Bot – pełna wersja
🧱 Plik: utils/telegram_bot.py
python
Kopiuj
Edytuj
import os
import requests
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def send_alert(message: str) -> bool:
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
    except Exception as e:
        print(f"Telegram error: {e}")
        return False
📬 Gotowy FORMAT WIADOMOŚCI:
python
Kopiuj
Edytuj
def format_alert(symbol: str, score: float, tags: list[str], compressed: bool, stage1g: bool) -> str:
    tag_line = ", ".join(tags) if tags else "Brak"
    compression_status = "✅" if compressed else "❌"
    stage1g_status = "✅" if stage1g else "❌"

    message = f"""
🚨 *{symbol}* – *PPWCS: {score}*
*Tags:* `{tag_line}`
*Compressed:* {compression_status}
*Stage 1g:* {stage1g_status}

#PrePumpAlert
"""
    return message.strip()
💡 Przykład użycia w scan_cycle():
python
Kopiuj
Edytuj
from utils.telegram_bot import send_alert, format_alert

# ...
if should_alert(symbol, score):
    msg = format_alert(symbol, score, event_tags, compressed, stage1g_active)
    send_alert(msg)
    if score >= 80:
        send_report_to_chatgpt(symbol, signals, score)
📁 Pełny kod telegram_bot.py teraz zawiera:

python
Kopiuj
Edytuj
import os
import requests
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def send_alert(message: str) -> bool:
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, json=payload, timeout=10)
        return response.status_code == 200
    except Exception as e:
        print(f"Telegram error: {e}")
        return False

def format_alert(symbol: str, score: float, tags: list[str], compressed: bool, stage1g: bool) -> str:
    tag_line = ", ".join(tags) if tags else "Brak"
    compression_status = "✅" if compressed else "❌"
    stage1g_status = "✅" if stage1g else "❌"

    message = f"""
🚨 *{symbol}* – *PPWCS: {score}*
*Tags:* `{tag_line}`
*Compressed:* {compression_status}
*Stage 1g:* {stage1g_status}

#PrePumpAlert
"""
    return message.strip()