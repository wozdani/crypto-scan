proszƒô o dodanie nowego oddzielnego modu≈Çu detekcyjnego do projektu crypto-scan w pliku stage_minus2_1.py. Modu≈Ç ten ma wykrywaƒá ukrytƒÖ akumulacjƒô (Silent Accumulation), czyli przypadki, gdy rynek wyglƒÖda na pasywny, ale pojawiajƒÖ siƒô subtelne sygna≈Çy kupna.

üìå WA≈ªNE:

Modu≈Ç nie mo≈ºe wp≈Çywaƒá na istniejƒÖcƒÖ logikƒô Stage ‚Äì2.1

Je≈õli wykryje sygna≈Ç ‚Äì samodzielnie wysy≈Ça alert oraz analizƒô GPT, bez modyfikowania g≈Ç√≥wnego scoringu

üîß Funkcja:
python
Kopiuj
Edytuj
detect_silent_accumulation_v1(symbol, market_data, rsi_series, orderbook, vwap_data, volume_profile, inflow, whale_txs, social_score)
üß† Kryteria:
System analizuje spokojne tokeny, gdzie:

RSI ‚âà 50 przez kilka ≈õwiec

niskie korpusy i knoty

kurs blisko VWAP

brak hype w socialu

ALE subtelne presje zakupowe: inflow, pinning, heatmapa, slope, whale micro-TX

‚úÖ Wymagane:
min. 5 aktywacji z poni≈ºszej listy

w tym min. 1 z kategorii presji zakupowej (pinning, inflow, heatmap, cluster)

üß¨ Kod funkcji:
python
Kopiuj
Edytuj
def detect_silent_accumulation_v1(symbol, market_data, rsi_series, orderbook, vwap_data, volume_profile, inflow, whale_txs, social_score):
    try:
        score = 0
        explanations = []

        # RSI ~50
        if len(rsi_series) >= 8 and all(45 <= r <= 55 for r in rsi_series[-8:]):
            score += 1
            explanations.append("RSI flat")

        # ≈öwiece z ma≈Çym cia≈Çem
        bodies = [
            abs(float(c["close"]) - float(c["open"])) / (float(c["high"]) - float(c["low"]) + 1e-6)
            for c in market_data[-8:]
        ]
        if all(b < 0.3 for b in bodies):
            score += 1
            explanations.append("Low body candles")

        # Minimalne knoty
        if all(
            (float(c["high"]) - max(float(c["close"]), float(c["open"])) < 0.1 * float(c["high"])) and
            (min(float(c["close"]), float(c["open"])) - float(c["low"]) < 0.1 * float(c["low"]))
            for c in market_data[-8:]
        ):
            score += 1
            explanations.append("Minimal wicks")

        # VWAP pinning
        if vwap_data.get("pinning_count", 0) >= 6:
            score += 2
            explanations.append("VWAP pinning")

        # Volume cluster
        if volume_profile.get("bullish_cluster"):
            score += 2
            explanations.append("Bullish volume cluster")

        # Heatmapa ‚Äì znika poda≈º
        if orderbook.get("supply_vanish") == True:
            score += 2
            explanations.append("Supply wall vanish (heatmap)")

        # DEX inflow
        if inflow > 2 * inflow_avg(symbol):
            score += 2
            explanations.append("DEX inflow anomaly")

        # Whale TX (ma≈Çe)
        if 2 <= len([tx for tx in whale_txs if tx["usd"] < 10000]) <= 4:
            score += 1
            explanations.append("Micro whale activity")

        if score >= 5 and any(det in explanations for det in ["VWAP pinning", "Bullish volume cluster", "Supply wall vanish (heatmap)", "DEX inflow anomaly"]):
            print(f"üîµ Silent Accumulation detected on {symbol}: {score} pts")
            signals = {"silent_accumulation": True}
            ppwcs = 65
            send_alert(symbol, ppwcs_score=ppwcs, signals=signals)
            send_report_to_chatgpt(symbol, ppwcs_score=ppwcs, signals=signals)
            save_conditional_reports(symbol, signals=signals, ppwcs_score=ppwcs)
            return True

        return False
    except Exception as e:
        print(f"‚ùå Silent Accumulation detection failed: {e}")
        return False
üîó U≈ºyj istniejƒÖcych funkcji:
send_alert()

send_report_to_chatgpt()

save_conditional_reports()

inflow_avg(symbol) (je≈õli nie ma ‚Äì dodaj z past_inflow_cache)

