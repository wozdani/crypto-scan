oto pe≈Çna wersja funkcji compute_ppwcs() zgodna z modelem PPWCS 2.5, z wagami, kontekstem, obs≈ÇugƒÖ tag√≥w, czystƒÖ akumulacjƒÖ, trigger type oraz skalowaniem do 100 punkt√≥w.

‚úÖ Funkcja compute_ppwcs()
python
Kopiuj
Edytuj
def compute_ppwcs(signals: dict, previous_score: int = 0) -> int:
    """
    Oblicza PPWCS 2.5 (Pre-Pump Weighted Composite Score) ‚Äì score 0‚Äì100
    """
    score = 0

    # --- STAGE ‚Äì2.1: Mikro-anomalie ---
    if signals.get("whale_activity"):
        score += 15
    if signals.get("dex_inflow"):
        score += 15
    if signals.get("volume_spike"):
        score += 10
    if signals.get("orderbook_anomaly"):
        score += 10
    if signals.get("social_spike"):
        score += 5

    # --- PURE ACCUMULATION bonus ---
    if signals.get("whale_activity") and signals.get("dex_inflow") and not signals.get("social_spike"):
        score += 5

    # --- STAGE ‚Äì2.2: News / Tag Boost / Risk ---
    tag = signals.get("tag")
    boost_tags = {"listing": 10, "partnership": 10, "cex_listed": 7, "presale": 7, "airdrop": 3}
    risk_tags = {"exploit": -15, "rug": -100, "delisting": -100, "unlock": -10, "drama": -10}

    if tag:
        tag = tag.lower()
        if tag in boost_tags:
            score += boost_tags[tag]
        elif tag in risk_tags:
            score += risk_tags[tag]

    if signals.get("risk_flag"):
        score -= 15

    # --- STAGE ‚Äì1: Compression ---
    if signals.get("compressed"):
        score += 15

    # --- STAGE 1g ---
    if signals.get("stage1g_active"):
        if signals.get("stage1g_trigger_type") == "classic":
            score += 10
        elif signals.get("stage1g_trigger_type") == "tag_boost":
            score += 7

    # --- KONTEKST / CZAS DNIA ---
    time_tag = signals.get("time_tag")  # np. "before_15", "after_15", "night"
    if time_tag in {"before_15", "after_15"}:
        score += 3

    # --- OPCJONALNE: heatmap exhaustion ---
    if signals.get("heatmap_exhaustion"):
        score += 3

    # --- Skalowanie do max 100 ---
    score = max(0, min(score, 100))

    # --- Trailing scoring: tylko je≈õli wzrost >= 5 punkt√≥w ---
    if previous_score and score < previous_score + 5:
        return previous_score

    return score
üì§ Wymagane dane wej≈õciowe signals = {}:
python
Kopiuj
Edytuj
signals = {
    "whale_activity": True,
    "dex_inflow": True,
    "volume_spike": True,
    "orderbook_anomaly": False,
    "social_spike": False,
    "compressed": True,
    "stage1g_active": True,
    "stage1g_trigger_type": "classic",  # lub "tag_boost"
    "tag": "listing",
    "risk_flag": False,
    "time_tag": "after_15",
    "heatmap_exhaustion": False
}
üîÅ Wymagana zmienna previous_score
Przekazywana z pamiƒôci lub zapisana w pliku ‚Äì potrzebna do trailing logic.