utils/whale_detector.py
python
Kopiuj
Edytuj
import os
import requests
from utils.token_price import get_native_token_prices
import json
from datetime import datetime, timedelta

WHALE_MIN_USD = 50000  # minimalna wartość USD dla uznania jako whale transfer

def detect_whale_transfers(symbol, token_map):
    if symbol not in token_map:
        print(f"⚠️ Brak mapowania dla {symbol}")
        return False, 0.0

    token_data = token_map[symbol]
    chain = token_data.get("chain")
    address = token_data.get("address")

    if not chain or not address:
        print(f"⚠️ Brak danych chain/address dla {symbol}")
        return False, 0.0

    # Wybierz API explorer w zależności od sieci
    explorer_urls = {
        "ethereum": f"https://api.etherscan.io/api",
        "bsc": f"https://api.bscscan.com/api",
        "polygon": f"https://api.polygonscan.com/api",
        "arbitrum": f"https://api.arbiscan.io/api",
        "optimism": f"https://api-optimistic.etherscan.io/api",
        "tron": f"https://api.trongrid.io/v1/accounts/{address}/transactions"
    }

    # Ustal parametry zapytania
    if chain == "tron":
        url = explorer_urls[chain]
        params = {
            "only_confirmed": "true",
            "limit": 10,
            "sort": "-timestamp"
        }
        headers = {
            "TRON-PRO-API-KEY": os.getenv("TRONGRID_API_KEY")
        }
    else:
        url = explorer_urls.get(chain)
        params = {
            "module": "account",
            "action": "tokentx",
            "address": address,
            "startblock": 0,
            "endblock": 99999999,
            "sort": "desc",
            "apikey": os.getenv(f"{chain.upper()}SCAN_API_KEY")
        }
        headers = {}

    try:
        response = requests.get(url, params=params, headers=headers, timeout=10)
        data = response.json()

        if chain == "tron":
            txs = data.get("data", [])
        else:
            txs = data.get("result", [])

        native_prices = get_native_token_prices()
        native_price = native_prices.get(chain, 0)

        for tx in txs:
            # Dla EVM chains
            if chain != "tron":
                raw_value = int(tx["value"]) / (10 ** int(tx["tokenDecimal"]))
            else:
                raw_value = int(tx.get("raw_data", {}).get("contract", [{}])[0].get("parameter", {}).get("value", {}).get("amount", 0)) / 1e6

            usd_value = raw_value * native_price
            if usd_value >= WHALE_MIN_USD:
                print(f"🐋 Whale TX wykryty dla {symbol}: {usd_value:.2f} USD")
                return True, usd_value

        return False, 0.0

    except Exception as e:
        print(f"❌ Błąd przy wykrywaniu whale TX dla {symbol}: {e}")
        return False, 0.0
📁 W main.py (lub stage_minus2_1.py)
python
Kopiuj
Edytuj
from utils.whale_detector import detect_whale_transfers
from utils.token_map_loader import load_token_map  # funkcja, która ładuje JSON token_contract_map.json

token_map = load_token_map()
symbol = "WIFUSDT"  # przykładowy token

whale_detected, usd_amount = detect_whale_transfers(symbol, token_map)

if whale_detected:
    print(f"✅ Whale activity: ${usd_amount:.2f}")
else:
    print("❌ Brak istotnej aktywności whale")